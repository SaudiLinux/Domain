#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import os
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.markdown import Markdown

# Initialize console
console = Console()

class ReportGenerator:
    """Class for generating comprehensive scan reports"""
    
    def __init__(self, domain, output_file):
        """Initialize the ReportGenerator class
        
        Args:
            domain (str): Target domain
            output_file (str): Path to output file
        """
        self.domain = domain
        self.output_file = output_file
        self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def generate(self, results):
        """Generate a comprehensive report of scan results
        
        Args:
            results (dict): Scan results from all modules
        """
        # Create report sections
        sections = [
            self._create_header(),
            self._format_domain_info(results.get('domain_info', {})),
            self._format_subdomains(results.get('subdomains', [])),
            self._format_urls(results.get('urls', [])),
            self._format_admin_pages(results.get('admin_pages', [])),
            self._format_attack_surface(results.get('attack_surface', {})),
            self._format_vulnerabilities(results.get('vulnerabilities', []))
        ]
        
        # Combine sections
        report = '\n\n'.join(filter(None, sections))
        
        # Save report
        self._save_report(report)
        
        # Save JSON data
        self._save_json(results)
        
        # Display summary
        self._display_summary(results)
    
    def _create_header(self):
        """Create report header"""
        return f"""# Domain Scanner Report

Target Domain: {self.domain}
Scan Date: {self.timestamp}
Generated by: Domain Scanner (Author: SayerLinux)

---"""
    
    def _format_domain_info(self, info):
        """Format domain information section"""
        if not info:
            return ""
        
        return f"""## Domain Information

- IP Addresses: {', '.join(info.get('ip_addresses', []))}
- Registrar: {info.get('registrar', 'N/A')}
- Creation Date: {info.get('creation_date', 'N/A')}
- Expiration Date: {info.get('expiration_date', 'N/A')}
- Name Servers: {', '.join(info.get('nameservers', []))}
- MX Records: {', '.join(info.get('mx_records', []))}
- TXT Records: {', '.join(info.get('txt_records', []))}

### HTTP Headers
```
{json.dumps(info.get('http_headers', {}), indent=2)}
```"""
    
    def _format_subdomains(self, subdomains):
        """Format subdomains section"""
        if not subdomains:
            return ""
        
        return f"""## Discovered Subdomains

Total Subdomains Found: {len(subdomains)}

```
{chr(10).join(sorted(subdomains))}
```"""
    
    def _format_urls(self, urls):
        """Format discovered URLs section"""
        if not urls:
            return ""
        
        return f"""## Discovered URLs

Total URLs Found: {len(urls)}

```
{chr(10).join(sorted(urls))}
```"""
    
    def _format_admin_pages(self, admin_pages):
        """Format admin pages section"""
        if not admin_pages:
            return ""
        
        return f"""## Admin Pages

Total Admin Pages Found: {len(admin_pages)}

```
{chr(10).join(sorted(admin_pages))}
```"""
    
    def _format_attack_surface(self, attack_surface):
        """Format attack surface section"""
        if not attack_surface:
            return ""
        
        sections = ["## Attack Surface Analysis\n"]
        
        # Open Ports and Services
        if attack_surface.get('open_ports'):
            sections.append("### Open Ports and Services")
            for port in sorted(attack_surface['open_ports']):
                service = attack_surface['services'].get(str(port), 'Unknown')
                sections.append(f"- Port {port}: {service}")
        
        # Technologies
        if attack_surface.get('technologies'):
            sections.append("\n### Detected Technologies")
            for tech, version in attack_surface['technologies'].items():
                sections.append(f"- {tech}: {version}")
        
        # Security Headers
        if attack_surface.get('security_headers'):
            sections.append("\n### Security Headers")
            sections.append("```")
            sections.append(json.dumps(attack_surface['security_headers'], indent=2))
            sections.append("```")
        
        # Other Findings
        other_findings = [
            ('cdn_usage', 'CDN Usage'),
            ('waf_detection', 'WAF Detection'),
            ('email_addresses', 'Email Addresses'),
            ('exposed_documents', 'Exposed Documents')
        ]
        
        for key, title in other_findings:
            if attack_surface.get(key):
                sections.append(f"\n### {title}")
                if isinstance(attack_surface[key], list):
                    sections.extend([f"- {item}" for item in attack_surface[key]])
                else:
                    sections.append(f"- {attack_surface[key]}")
        
        return '\n'.join(sections)
    
    def _format_vulnerabilities(self, vulnerabilities):
        """Format vulnerabilities section"""
        if not vulnerabilities:
            return ""
        
        sections = ["## Vulnerability Analysis\n"]
        sections.append(f"Total Vulnerabilities Found: {len(vulnerabilities)}\n")
        
        # Group vulnerabilities by type
        vuln_types = {}
        for vuln in vulnerabilities:
            vuln_type = vuln['type']
            if vuln_type not in vuln_types:
                vuln_types[vuln_type] = []
            vuln_types[vuln_type].append(vuln)
        
        # Format each vulnerability type
        for vuln_type, vulns in vuln_types.items():
            sections.append(f"### {vuln_type}")
            for vuln in vulns:
                sections.append(f"- URL: {vuln['url']}")
                if 'payload' in vuln:
                    sections.append(f"  - Payload: {vuln['payload']}")
                if 'issue' in vuln:
                    sections.append(f"  - Issue: {vuln['issue']}")
                sections.append(f"  - Evidence: {vuln['evidence']}\n")
        
        return '\n'.join(sections)
    
    def _save_report(self, report):
        """Save report to file"""
        try:
            with open(self.output_file, 'w') as f:
                f.write(report)
            console.print(f"\n[green]Report saved to {self.output_file}[/green]")
            
        except Exception as e:
            console.print(f"\n[red]Error saving report: {str(e)}[/red]")
    
    def _save_json(self, results):
        """Save raw results in JSON format"""
        try:
            json_file = self.output_file.rsplit('.', 1)[0] + '.json'
            with open(json_file, 'w') as f:
                json.dump(results, f, indent=4)
            console.print(f"[green]Raw results saved to {json_file}[/green]")
            
        except Exception as e:
            console.print(f"[red]Error saving JSON results: {str(e)}[/red]")
    
    def _display_summary(self, results):
        """Display scan summary in the terminal"""
        # Create summary table
        table = Table(title="Scan Summary")
        table.add_column("Module", style="cyan")
        table.add_column("Findings", style="green")
        
        # Add module results
        if 'domain_info' in results:
            table.add_row("Domain Info", "âœ“ Completed")
        
        if 'subdomains' in results:
            table.add_row("Subdomains", str(len(results['subdomains'])))
        
        if 'urls' in results:
            table.add_row("URLs", str(len(results['urls'])))
        
        if 'admin_pages' in results:
            table.add_row("Admin Pages", str(len(results['admin_pages'])))
        
        if 'attack_surface' in results:
            ports = len(results['attack_surface'].get('open_ports', []))
            table.add_row("Attack Surface", f"{ports} open ports")
        
        if 'vulnerabilities' in results:
            table.add_row("Vulnerabilities", str(len(results['vulnerabilities'])))
        
        console.print("\n")
        console.print(table)